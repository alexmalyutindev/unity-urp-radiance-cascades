#pragma kernel RenderAndMergeCascade
#pragma kernel CombineCascade

#include "Common.hlsl"

#define _LOAD_UPPER_CASCADE
#define _FOUR_RAYS_MERGE

// #define DEBUG
// #define USE_SMOOTHED_DEPTH

// Input
int _CascadeLevel;
int2 _ProbesCount;
float4x4 _WorldToView;
float4x4 _ViewToHClip;

Texture2D<float2> _MinMaxDepth;
Texture2D<float> _SmoothedDepth;
Texture2D<float4> _BlurredColor;

// Output
RWTexture2D<float4> _OutCascade;

// Cascade Layout
// Rows - depth angled rays
// Columns - projection angled rays
// ._______________________________.
// |   ↗   |   ↖   |   ↙   |   ↘   |
// |_______|_______|_______|_______|
// |   ↗   |   ↖   |   ↙   |   ↘   |
// |_______|_______|_______|_______|
// |   ↗   |   ↖   |   ↙   |   ↘   |
// |_______|_______|_______|_______|
// |   ↗   |   ↖   |   ↙   |   ↘   |
// |_______|_______|_______|_______|
// |_↗_|_↑_|_↖_|_←_|_↙_|_↓_|_↘_|_↗_|
// |_↗_|_↑_|_↖_|_←_|_↙_|_↓_|_↘_|_↗_|
// |_↗_|_↑_|_↖_|_←_|_↙_|_↓_|_↘_|_↗_|
// |_↗_|_↑_|_↖_|_←_|_↙_|_↓_|_↘_|_↗_|

static const int2 Ranges4[] =
{
    int2(0, 1),
    int2(1, 4),
    int2(4, 16),
    int2(16, 64),
    int2(64, 256),
    int2(256, 1024),
    int2(1024, 2048),
};


float3 TransformWorldToScreenSpace(float3 positionWS)
{
    float4 positionCS = TransformWorldToHClip(positionWS);
    positionCS.xyz /= positionCS.w;
    positionCS.xy = mad(positionCS.xy, float2(0.5f, -0.5f), float2(0.5f, 0.5f));
    return positionCS.xyz;
}

float3 TransformViewToScreenSpace(float3 positionVS)
{
    float4 positionCS = mul(_ViewToHClip, float4(positionVS, 1));
    positionCS.xyz /= positionCS.w;
    positionCS.xy = mad(positionCS.xy, float2(0.5f, -0.5f), float2(0.5f, 0.5f));
    return positionCS.xyz;
}

float4 LoadUpperCascadeBilinear(int2 coords, float2 weights)
{
    float4 a = _OutCascade[coords];
    float4 b = _OutCascade[coords + int2(1, 0)];
    float4 c = _OutCascade[coords + int2(0, 1)];
    float4 d = _OutCascade[coords + int2(1, 1)];

    float4 e = lerp(a, b, weights.x);
    float4 f = lerp(c, d, weights.x);

    return lerp(e, f, weights.y);
}

inline float GetProbeDepth(float2 uv, int cascadeLevel)
{
    #ifdef USE_SMOOTHED_DEPTH

    float probeDepth = SAMPLE_TEXTURE2D_LOD(
        _SmoothedDepth,
        sampler_LinearClamp,
        uv,
        cascadeLevel + 0 // TODO: Calculate MipLevel depend on buffer resolution
    ).x;

    #if UNITY_REVERSED_Z
    probeDepth = 1.0f - probeDepth;
    #endif

#else

    float probeDepth = SAMPLE_TEXTURE2D_LOD(
        _MinMaxDepth,
        sampler_LinearClamp,
        uv,
        cascadeLevel + 1
    ).y;

#endif

    return probeDepth;
}

inline float4 LoadUpperRadiance(int2 coords)
{
    // TODO: Take into account probe positions to select more proper angled probes.
    const int2 lowerCascadeSize = _ProbesCount;
    const int2 upperCascadeSize = _ProbesCount * 0.5f;

    int2 upperCascadeCoords = floor(coords * 0.5f);

    // 02----12----22----32----42----42
    // | D01 |     | E11 |     | F21 |
    // 02----12----22----32----42----42
    // |     |     |     |     |     |
    // 01----11----21----31----41----41
    // | A00 |     | B10 |     | C20 |
    // 00----10----20----30----40----40

    int2 lowerProbeId = coords % lowerCascadeSize;
    int2 upperProbeBottomLeftId = clamp(floor((lowerProbeId - 1) * 0.5f), 0, upperCascadeSize - 2);
    float2 bilinearWeight = saturate(fmod((lowerProbeId - 1) * 0.5f, 1.0f) + 0.25f);

    upperCascadeCoords = upperCascadeCoords / upperCascadeSize * upperCascadeSize;
    upperCascadeCoords.x *= 2;
    upperCascadeCoords += upperProbeBottomLeftId;
    upperCascadeCoords.y += upperCascadeSize.y * 4;

    int2 offset = int2(upperCascadeSize.x, 0);

    float4 upperRadiance = 0.0f;

    // NOTE: Sample 2 main rays
    upperRadiance += LoadUpperCascadeBilinear(upperCascadeCoords, bilinearWeight);
    upperRadiance += LoadUpperCascadeBilinear(upperCascadeCoords + offset, bilinearWeight);

    #ifdef _FOUR_RAYS_MERGE
    // NOTE: Sample 2 secondary rays
    int2 secondaryUpperCascadeCoords = upperCascadeCoords - offset;
    secondaryUpperCascadeCoords.x += (secondaryUpperCascadeCoords.x < 0) * _CascadeBufferSize.x;
    upperRadiance += LoadUpperCascadeBilinear(secondaryUpperCascadeCoords, bilinearWeight);
    secondaryUpperCascadeCoords = upperCascadeCoords + 2 * offset;
    secondaryUpperCascadeCoords.x -= (secondaryUpperCascadeCoords.x > _CascadeBufferSize.x) * _CascadeBufferSize.x;
    upperRadiance += LoadUpperCascadeBilinear(secondaryUpperCascadeCoords, bilinearWeight);
    #endif

    #ifdef _FOUR_RAYS_MERGE
    upperRadiance *= 0.25f;
    #else
    upperRadiance *= 0.5f;
    #endif

    return upperRadiance;
}

[numthreads(8, 4, 1)]
void RenderAndMergeCascade(uint3 id : SV_DispatchThreadID)
{
    const float RayScale = 0.1f;

    int2 coords = int2(id.xy);
    int2 targetCoords = int2(id.xy);
    targetCoords.y += _ProbesCount.y * 4;

    if (coords.x >= _CascadeBufferSize.x || coords.y >= _ProbesCount.y * 4)
    {
        return;
    }

    if (
        _CascadeLevel == 0 &&
        any(fmod(coords, _ProbesCount) == 0 || (coords + 1) % _ProbesCount == 0)
    )
    {
        // NOTE: Borders
        // _OutCascade[targetCoords] = float4(0.0f, 0.0f, 0.2f * _CascadeLevel, 1.0f);
        // _OutCascade[targetCoords] = float4(0.0f, 0.0f, 1.0f, 1.0f);
        // return;
    }

    // BUG: Fix probe probeCenterUV!
    int2 probeCenterCoord = coords % _ProbesCount;
    float2 probeCenterUV = float2(probeCenterCoord + 1.0f) / (_ProbesCount + 1.0f);

    const float cascadeLevel = _CascadeLevel;

    float2 angleId;
    const float cascadeFactor = pow(2.0f, cascadeLevel);
    const float projRays = 8.0f * cascadeFactor;
    const float depthRays = floor(4.0f * cascadeFactor * 2.0f);
    angleId.x = floor(coords.x * projRays * _CascadeBufferSize.z);
    angleId.y = fmod(floor((1.0f - (coords.y + 1) * _CascadeBufferSize.w) * depthRays), 4);

    float probeDepth = GetProbeDepth(probeCenterUV, cascadeLevel);
    if (probeDepth == UNITY_RAW_FAR_CLIP_VALUE)
    {
        _OutCascade[coords] = float4(0.0f, 0.0f, 0.0f, 1.0f);
        return;
    }

    // Raytracing
    float3 probeCenterWS = GetPositionWS(probeCenterUV, probeDepth);
    float3 viewDirectionWS = normalize(probeCenterWS - _WorldSpaceCameraPos);
    probeCenterWS -= viewDirectionWS * 0.2f;

    float3 directionWS = GetRay_DirectionFirst(angleId, cascadeLevel);

    int2 range = Ranges4[cascadeLevel];

    float3 rayOriginWS = probeCenterWS + directionWS * RayScale * range.x;
    float3 rayEndWS = probeCenterWS + directionWS * RayScale * range.y;

    float3 rayOriginVS = mul(_WorldToView, float4(rayOriginWS, 1));
    float3 rayEndVS = mul(_WorldToView, float4(rayEndWS, 1));
    // rayEndVS = rayOriginVS + directionWS * RayScale * (range.y - range.x);

    float3 rayOriginCS = mul(_ViewToHClip, float4(rayOriginVS, 1));
    float3 rayEndCS = mul(_ViewToHClip, float4(rayEndVS, 1));


    float stepsCount = length((rayEndCS.xy - rayOriginCS.xy) * _ColorTexture_TexelSize.zw);
    stepsCount *= pow(0.5f, cascadeLevel + 2);
    stepsCount = min(stepsCount, 200); // NOTE: Oversampling prevention.
    stepsCount = max(2, stepsCount);

    float4 radiance = float4(0.0f, 0.0f, 0.0f, 1.0f);

    UNITY_LOOP
    for (int i = 0; i < stepsCount; i++)
    {
        // TODO: Use DDA for ray marching.
        float3 rayVS = lerp(rayOriginVS, rayEndVS, i / (stepsCount - 1.0f));
        float3 ray = TransformViewToScreenSpace(rayVS);
        if (any(ray.xy < 0 || 1 < ray.xy))
        {
            break;
        }

        float2 minMaxDepth = SAMPLE_TEXTURE2D_LOD(
            _MinMaxDepth,
            sampler_PointClamp,
            ray.xy,
            cascadeLevel + 2
        ).xy;

        // TODO: Use MinMax compare on lower mips and go up if collide.
        float depth = minMaxDepth.y;

        float linearDepth = LinearEyeDepth(depth, _ZBufferParams);
        bool test = linearDepth < -rayVS.z; // && linearDepth > -(rayVS.z + 2.25f);

        // TODO: Compare depth for 4 depth rays.
        // TODO: Add ray length dependency.
        float4 depth4Test = linearDepth.xxxx < float4(0.2f, 0.1f, -0.1f, -0.2f) - rayVS.zzzz;
        float occlusion = dot(depth4Test, 0.2f);

        if (test)
        {
            // TODO: Calculate MipLevel depend on resolution!
            radiance.rgb = SAMPLE_TEXTURE2D_LOD(_BlurredColor, sampler_LinearClamp, ray.xy, cascadeLevel + 2).rgb;
            radiance.a = 0.0f; // occlusion;
            break;
        }
    }

    if (cascadeLevel > 4)
    {
        _OutCascade[targetCoords] = radiance;
        return;
    }

    float4 upperRadiance = LoadUpperRadiance(coords);
    radiance.rgb += upperRadiance.rgb * radiance.a;
    radiance.a *= upperRadiance.a;

    _OutCascade[targetCoords] = radiance;
}

float4 _FinalCascade_TexelSize;
RWTexture2D<float4> _FinalCascade;

[numthreads(8, 8, 1)]
void CombineCascade(uint3 id : SV_DispatchThreadID)
{
    int2 targetCoords = int2(id.x, _FinalCascade_TexelSize.w - id.y);

    int2 sideId = floor(2 * id.xy * _FinalCascade_TexelSize.xy);
    int side = sideId.x + sideId.y * 2;

    int2 coords = fmod(id.xy * 2, _FinalCascade_TexelSize.zw) / 4;
    coords.y = _CascadeBufferSize.y - coords.y;
    coords.x += side * _CascadeBufferSize.x * 0.25f;
    float2 weight = max(0.0f, frac(id.xy * 0.5f) - 0.25f);

    int2 offset = int2(0, -_CascadeBufferSize.y * 0.125f);
    float4 radiance = 0.0f;

    radiance += LoadUpperCascadeBilinear(coords, weight);
    radiance += LoadUpperCascadeBilinear(coords + offset, weight);
    radiance += LoadUpperCascadeBilinear(coords + offset * 2, weight);
    radiance += LoadUpperCascadeBilinear(coords + offset * 3, weight);
    coords.x += _CascadeBufferSize.x * 0.125f;

    radiance += LoadUpperCascadeBilinear(coords, weight);
    radiance += LoadUpperCascadeBilinear(coords + offset, weight);
    radiance += LoadUpperCascadeBilinear(coords + offset * 2, weight);
    radiance += LoadUpperCascadeBilinear(coords + offset * 3, weight);

    _FinalCascade[targetCoords] = radiance * 0.25f * 0.5f;
}
