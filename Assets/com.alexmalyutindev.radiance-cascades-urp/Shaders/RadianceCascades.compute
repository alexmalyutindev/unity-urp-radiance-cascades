#pragma kernel RenderCascade
#pragma kernel MergeCascades

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "Common.hlsl"

float _ProbeSize;
float _CascadeLevel;
RWTexture2D<float4> _OutCascade;

[numthreads(8,8,1)]
void RenderCascade(uint3 id : SV_DispatchThreadID)
{
    uint2 coords = id.xy;
    if (any(coords > uint2(_CascadeBufferSize.xy)))
    {
        return;
    }

    float2 probeCenterUV = (floor(coords / _ProbeSize) * _ProbeSize + 0.5f * _ProbeSize) * _CascadeBufferSize.zw;

    int2 coordsInCascade = fmod(coords, _ProbeSize);

    float angleStep = TWO_PI / (_ProbeSize * _ProbeSize);
    float angle = (coordsInCascade.x + coordsInCascade.y * _ProbeSize) * angleStep;
    angle += angleStep * 0.5f;
    float2 ray;
    sincos(angle, ray.y, ray.x);

    // NOTE: Scale ray to [0; 1] range
    ray *= _CascadeBufferSize.zw;

    int2 cascadeRange = CalculateRange(_CascadeLevel);

    // Offsetting center
    probeCenterUV += ray * cascadeRange.x;

    float sceneDepth = SampleLinearDepth(probeCenterUV) + 0.0001f;
    int stepsCount = floor(_ProbeSize * (_CascadeLevel + 1));
    stepsCount = cascadeRange.y - cascadeRange.x;

    // TODO: Use int coords instead of uv. 
    _OutCascade[coords] = RayTrace(probeCenterUV, ray, sceneDepth, stepsCount);
}


/////////////
/// MERGE ///
/////////////

static const int Cascade0Size = 2;

float _LowerCascadeLevel;
Texture2D _UpperCascade;
RWTexture2D<float4> _LowerCascade;


//This function findes the 4 nearest angles in the upperProbe to the given angle, and average the values
float4 AverageNearbyAngles(int2 coords, float angle)
{
    int upperCascadeDim = Cascade0Size * pow(2, _LowerCascadeLevel + 1);

    //Transform the angle to an index value inside the upperCascade
    float angleStep = (2 * PI) / (float)(upperCascadeDim * upperCascadeDim);
    int index = AngleToIndex(angle - angleStep / 2, upperCascadeDim);
    //We subtract a small offset to get a correct index value
    //You can try to remove it and you will see the difference

    int2 angle1Position = coords + IndexToCoords(index - 1, upperCascadeDim);
    int2 angle2Position = coords + IndexToCoords(index, upperCascadeDim);
    int2 angle3Position = coords + IndexToCoords(index + 1, upperCascadeDim);
    int2 angle4Position = coords + IndexToCoords(index + 2, upperCascadeDim);
    //IndexToCoords() here reconstruct the 2D coords from the 1D index

    //Finally sampling and averaging
    float4 dir1 = _UpperCascade[angle1Position];
    float4 dir2 = _UpperCascade[angle2Position];
    float4 dir3 = _UpperCascade[angle3Position];
    float4 dir4 = _UpperCascade[angle4Position];

    return (dir1 + dir2 + dir3 + dir4) * 0.25;
}

// This function take the averaged angles from the 4 nearby probes (in the upper cascade) and
// interpolate between them based on the position of the lower probe (in the lower cascade)
float4 SampleNearbyProbes(int2 coords, float angle)
{
    // Calculating dimensions
    int lowerCascadeDim = Cascade0Size * pow(2, _LowerCascadeLevel);
    int upperCascadeDim = Cascade0Size * pow(2, _LowerCascadeLevel + 1);

    //Calculate the position of the center of the lower probe
    int2 lowerCascadeIndex = floor(coords / lowerCascadeDim);
    int2 lowerCascadeCenterPos = lowerCascadeIndex * lowerCascadeDim + (lowerCascadeDim / 2);

    //Calculate the position of bottom-left upper probe
    //(there is 4 upper probes surrounding the lower probe: bottom-left, bottom-right, top-left, top-right)
    //(this code gets the position of the bottom-left one)
    int2 upperCascadeIndex = floor((lowerCascadeIndex - 0.5) / 2.0);
    int2 upperCascadeOriginPos = upperCascadeIndex * upperCascadeDim;
    int2 upperCascadeCenterPos = upperCascadeOriginPos + upperCascadeDim * 0.5f;

    // Since we know the position of the bottom-left probe, the others can be reached just with adding a simple offset
    // the function AverageNearbyAngles() will take care of the rest and find the 4 nearest angle to the one we want and averge them
    float4 rad1 = AverageNearbyAngles(upperCascadeOriginPos + int2(0, 0), angle);
    float4 rad2 = AverageNearbyAngles(upperCascadeOriginPos + int2(upperCascadeDim, 0), angle);
    float4 rad3 = AverageNearbyAngles(upperCascadeOriginPos + int2(0, upperCascadeDim), angle);
    float4 rad4 = AverageNearbyAngles(upperCascadeOriginPos + int2(upperCascadeDim, upperCascadeDim), angle);

    float2 weight = (lowerCascadeCenterPos - upperCascadeCenterPos) / float(upperCascadeDim);
    // the weight have exactly 4 possible values : (0.25, 0.25), (0.25, 0.75), (0.75, 0.25), (0.75, 0.75)
    // it's the relative position of the lower probe in the 4 upper probes

    // Then we bilinearly interpolate between them
    float4 m1 = lerp(rad1, rad2, weight.x);
    float4 m2 = lerp(rad3, rad4, weight.x);

    float4 radiance = lerp(m1, m2, weight.y);

    return radiance;
}


[numthreads(8,8,1)]
void MergeCascades(uint3 id : SV_DispatchThreadID)
{
    uint2 coords = id.xy;
    if (any(coords > uint2(_CascadeBufferSize.xy)))
    {
        return;
    }

    float4 radiance = _LowerCascade[coords]; // Radiance from lower cascade
    if (radiance.a < 0.5f)
    {
        _LowerCascade[id.xy] = radiance;
        return;
    }

    float cascadeDim = Cascade0Size * pow(2, _LowerCascadeLevel);
    int2 coordsInCascade = fmod(coords, cascadeDim);
    float angleStep = TWO_PI / (cascadeDim * cascadeDim);
    float angle = (coordsInCascade.x + coordsInCascade.y * cascadeDim) * angleStep;
    angle += angleStep * 0.5f;

    //After getting the angle we then sample the 4 nearby probes in the upper cascade in that angle (or direction as other say)
    float4 upperRadiance = SampleNearbyProbes(coords, angle);

    //Finally we compose the radiance we calculated from the upper cascade and the radiance from lower one
    radiance.rgb += upperRadiance.rgb * radiance.a;
    radiance.a *= upperRadiance.a;

    _LowerCascade[id.xy] = radiance;
}
