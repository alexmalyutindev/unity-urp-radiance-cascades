#pragma kernel RenderCascade
#pragma kernel MergeCascade

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "Common.hlsl"

// Layout:
// .______________.
// | +X | +Y | +Z |
// |____|____|____|
// | -X | -Y | -Z |
// |____|____|____|
RWTexture2D<float4> _OutCascade;
int2 _ProbesCount;

float _ProbeSize;
float _CascadeLevel;
float4x4 _View;
float4x4 _ViewProjection;
float4x4 _InvViewProjection;

static const float3 Axes[6] =
{
    float3(1.0f, 0.0f, 0.0f),
    float3(0.0f, 1.0f, 0.0f),
    float3(0.0f, 0.0f, 1.0f),
    float3(-1.0f, 0.0f, 0.0f),
    float3(0.0f, -1.0f, 0.0f),
    float3(0.0f, 0.0f, -1.0f),
};

static const half3x3 Basis[6] =
{
    // +X
    half3x3(
        0.0h, 0.0h, -1.0h,
        0.0h, 1.0h, 0.0h,
        1.0h, 0.0h, 0.0h
    ),
    // +Y
    half3x3(
        0.0h, 0.0h, -1.0h,
        -1.0h, 0.0h, 0.0h,
        0.0h, 1.0h, 0.0h
    ),
    // +Z
    half3x3(
        1.0h, 0.0h, 0.0h,
        0.0h, 1.0h, 0.0h,
        0.0h, 0.0h, 1.0h
    ),
    // -X
    half3x3(
        0.0h, 0.0h, 1.0h,
        0.0h, 1.0h, 0.0h,
        -1.0h, 0.0h, 0.0h
    ),
    // -Y
    half3x3(
        -1.0h, 0.0h, 0.0h,
        0.0h, 0.0h, -1.0h,
        0.0h, -1.0h, 0.0h
    ),
    // -Z
    half3x3(
        -1.0h, 0.0h, 0.0h,
        0.0h, 1.0h, 0.0h,
        0.0h, 0.0h, -1.0h
    ),
};

[numthreads(8,8,1)]
void RenderCascade(uint3 id : SV_DispatchThreadID)
{
    uint2 coords = id.xy;
    if (any(coords > _CascadeBufferSize.xy))
    {
        return;
    }

    float2 sideSize = _CascadeBufferSize.xy / float2(3, 2);

    float2 probeCenterUV = (floor(fmod(coords, sideSize) / _ProbeSize) * _ProbeSize + 0.5f * _ProbeSize) / sideSize;

    int probeSide = dot(floor(coords / sideSize), float2(1, 3));
    float2 indexInProbe = floor(fmod(coords, _ProbeSize));

    float3 direction = float3(0.0f, 0.0f, 0.5f);
    direction.xy += (indexInProbe + 1) / (_ProbeSize + 1.0f) * 2.0f - 1.0f;
    direction = mul(Basis[probeSide], normalize(direction));


    float sceneDepth = SAMPLE_DEPTH_TEXTURE_LOD(_DepthTexture, sampler_PointClamp, probeCenterUV, 0);
    float3 positionWS = ComputeWorldSpacePosition(float4(probeCenterUV, sceneDepth, 1), _InvViewProjection);

    positionWS += _View[2].xyz * 0.1f;

    int2 cascadeRange = CalculateRange(_CascadeLevel);

    float4 color = float4(0, 0, 0, 1);
    for (int i = cascadeRange.x; i < cascadeRange.y; i++)
    {
        float3 ray = positionWS + direction * i * 0.1f;

        float4 positionCS = mul(_ViewProjection, float4(ray, 1));
        float2 screenUV = positionCS.xy / positionCS.w;

        // _OutCascade[coords] = float4(screenUV, 0, 1);
        // return;

        if (any(screenUV < 0 || screenUV > 1)) break;

        float currentDepth = SAMPLE_DEPTH_TEXTURE_LOD(_DepthTexture, sampler_PointClamp, screenUV, 0);
        if (currentDepth > positionCS.z) // INTERSECTION!
        {
            color = SAMPLE_TEXTURE2D_LOD(_ColorTexture, sampler_PointClamp, screenUV, 0);
            color.a = 0.0f;
            break;
        }
    }

    _OutCascade[coords] = color;
}

float _LowerCascadeLevel;
Texture2D _UpperCascade;
RWTexture2D<float4> _LowerCascade;

[numthreads(8,8,1)]
void MergeCascade(uint3 id : SV_DispatchThreadID)
{
    int2 coords = id.xy;
    if (any(coords > _CascadeBufferSize.xy))
    {
        return;
    }

    int2 upperCoords = floor(coords * 0.125f) * 8;
    float4 radiance = _LowerCascade[coords]; // Radiance from lower cascade

    float4 upperRadiance = _UpperCascade[upperCoords];
    upperRadiance += _UpperCascade[upperCoords + int2(1, 0)];
    upperRadiance += _UpperCascade[upperCoords + int2(0, 1)];
    upperRadiance += _UpperCascade[upperCoords + int2(1, 1)];
    upperRadiance *= 0.25f;

    radiance.rgb += upperRadiance.rgb * radiance.a;
    radiance.a *= upperRadiance.a;

    _LowerCascade[id.xy] = radiance;
}
